#!/usr/bin/env python
from pathlib import Path
import argparse
import datetime
import os
import pathlib
import subprocess
import time


diskPath = '/dev/disk/by-id/'


_scriptRoot = os.path.dirname(os.path.realpath(__file__))
_scriptName = _scriptRoot.split('/')[-1]
_namespace  = _scriptName

os.chdir(_scriptRoot)

disks = {}

def is_root():
    return os.geteuid() == 0

def smartctl(diskPath, debug=False):

    modes = ['auto',
            'sntjmicron',
            'ata',
            'scsi',
            'nvme',
            'sat',
            'usbasm1352r',
            'usbcypress',
            'usbjmicron',
            'usbprolific',
            'usbsunplus',
            'sntasmedia',
            'sntrealtek',
            'jmb39x',
            'jms56x',
            'areca',
            '3ware',
            'hpt',
            'megaraid',
            'aacraid',
            'sssraid',
            'cciss']

    if not is_root():
        cmd = ['sudo']
    else:
        cmd = []

    cmd.extend(['smartctl', '-a'])
    cmd.append(diskPath)

    for mode in modes:
        cmdMode = cmd.copy()
        cmdMode.extend(['-d', mode])
        if debug:
            print('\tTrying mode: %s on disk %s' % (mode, diskPath))

        result = subprocess.run(cmdMode, stdout=subprocess.PIPE,stderr=subprocess.STDOUT) # Send stderr to stdout
        #print(cmdMode)
        #print(result.stdout.decode('utf-8'))
        if result.returncode != 0:
            continue # Try the next mode in the list
        else:
            print('Read %s with smartctl. Mode: %s' % (diskPath, mode))
            return result

    print('Failed to read %s with smartctl.' % diskPath)
    return False

def main():
    parser = argparse.ArgumentParser(description="A script for changing my wallpaper.")

    parser.add_argument(
            '--debug',
            action='store_true',
            default=False,
            help='Enable debug logging'
            )

    args = parser.parse_args()

    nowUnix = round(time.time())
    now     = str(datetime.datetime.now())


    # Figure out our swap devices so we can ignore them
    swapResult = subprocess.run(['swapon', '--noheadings'], stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    swapResultText = swapResult.stdout.decode('utf-8').split('\n')
    swapDevices = []
    for line in swapResultText:
        if line:
            swapDevices.append(line.split(' ')[0])

    for disk in sorted(os.listdir(diskPath)):
        fullPath = "%s/%s" % (diskPath, disk)
        if '-part' in disk:
            continue

        realPath = os.path.realpath("%s/%s" % (diskPath, disk))
        realPathBasename = os.path.basename(realPath)

        if realPath in swapDevices:
            continue

        if not pathlib.Path(realPath).is_block_device():
            continue

        if realPathBasename not in disks:
            disks[realPathBasename] = {}
            disks[realPathBasename]['name'] = disk
            disks[realPathBasename]['path'] = realPath
            disks[realPathBasename]['aliases'] = []
        else:
            disks[realPathBasename]['aliases'].append(disk)

    if disks:
        if not os.path.isdir('data'):
            os.mkdir('data')


    for disk in disks:
        diskDir    = 'data/%s' % disks[disk]['name']
        outputFile = '%s/smartctl.-a.%s.txt' % (diskDir, nowUnix)
        if not os.path.isdir(diskDir):
            os.mkdir(diskDir)

        for alias in disks[disk]['aliases']:
            Path(diskDir + '/alias_' + alias).touch()

        result = smartctl(disks[disk]['path'], debug=args.debug)

        if result:
            if result.stdout:
                stdout = result.stdout.decode('utf-8')
                with open(outputFile, "a") as destination:
                    destination.write(now + '\n')
                    destination.write("Stdout:\n")
                    destination.write(stdout + '\n')

if __name__ == "__main__":
    main()
